from typing import TYPE_CHECKING, Self, Any

if TYPE_CHECKING:
    from abc import ABC, abstractmethod
    from fractions import Fraction
    from pylogic.symbol import Symbol
    import sympy as sp

    Basic = Symbol | int | float | Fraction

def replace(
    expr: Basic | Expr,
    old: Any,
    new: Any,
) -> Basic | Expr: ...
def evaluate(expr: Basic | Expr) -> sp.Basic: ...
def maybe_evaluate(
    expr: Basic | Expr, should_evaluate=False
) -> sp.Basic | Basic | Expr: ...
def sqrt(expr: Basic | Expr, evaluate=True) -> Expr | sp.Basic: ...
def mul(*args: Basic | Expr, evaluate=True) -> Mul | sp.Basic: ...
def add(*args: Basic | Expr, evaluate=False) -> sp.Basic | Add: ...
def sub(a: Basic | Expr, b: Basic | Expr, evaluate=False) -> sp.Basic | Add: ...
def div(a: Basic | Expr, b: Basic | Expr, evaluate=False) -> sp.Basic | Mul: ...
def _latex(expr: Basic | Expr) -> str: ...

class Expr(ABC):
    def __init__(self, *args: Basic | Expr) -> None: ...
    def evaluate(self) -> sp.Basic: ...
    def _latex(self) -> str: ...
    def __str__(self) -> str: ...
    def _repr_latex_(self) -> str: ...
    def __repr__(self) -> str: ...
    def __copy__(self) -> Self: ...
    def __add__(self, other: Expr | Basic) -> sp.Add: ...
    def __sub__(self, other: Expr | Basic) -> sp.Add: ...
    def __mul__(self, other: Expr | Basic) -> sp.Mul: ...
    def __truediv__(self, other: Expr | Basic) -> sp.Mul: ...
    def __neg__(self) -> sp.Mul: ...
    def __pow__(self, other: Expr | Basic) -> sp.Pow: ...
    def __radd__(self, other: Expr | Basic) -> sp.Add: ...
    def __rsub__(self, other: Expr | Basic) -> sp.Add: ...
    def __rmul__(self, other: Expr | Basic) -> sp.Mul: ...
    def __rtruediv__(self, other: Expr | Basic) -> sp.Mul: ...
    def __rpow__(self, other: Expr | Basic) -> sp.Pow: ...
    def replace(self, old: Any, new: Any) -> Self: ...
    def copy(self) -> Self: ...

class Add(Expr):
    def evaluate(self) -> sp.Add: ...

class Mul(Expr):
    def evaluate(self) -> sp.Mul: ...

class Pow(Expr):
    base: Basic | Expr
    exp: Basic | Expr
    def evaluate(self) -> sp.Pow: ...
